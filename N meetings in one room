//{ Driver Code Starts
import java.io.*;
import java.util.*;
import java.lang.*;

class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader br =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine().trim());

        while (t-- > 0) {
            String inputLine[] = br.readLine().trim().split(" ");
            int n = Integer.parseInt(inputLine[0]);

            int start[] = new int[n];
            int end[] = new int[n];

            inputLine = br.readLine().trim().split(" ");
            for (int i = 0; i < n; i++)
                start[i] = Integer.parseInt(inputLine[i]);

            inputLine = br.readLine().trim().split(" ");
            for (int i = 0; i < n; i++) 
                end[i] = Integer.parseInt(inputLine[i]);
                
            int ans = new Solution().maxMeetings(start, end, n);
            System.out.println(ans);
        }
    }
}

// } Driver Code Ends


class Solution 
{
    //Function to find the maximum number of meetings that can
    //be performed in a meeting room.
    public static int maxMeetings(int start[], int end[], int n)
    {
        // add your code here
        int a[][]=new int[n][3];
        for(int i=0;i<n;i++)
        {
            a[i][0]=i;
            a[i][1]=start[i];
            a[i][2]=end[i]; 
            
        }
            Arrays.sort(a,Comparator.comparingDouble(o ->o[2]));
            int count=0;
            int endtime=a[0][2];
            
            count++;  // include first activity as it is
            for(int i=1;i<n;i++)
            {
                if(a[i][1]>endtime)
                {
                    count++;
                    endtime=a[i][2];   // update end time
                    
                }
            }
            return count;
            
            
        }
    
}
